/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/mpcadosch/Dev/bci_ros/bci_project_ws/src/pr_msgs/msg/BHState.msg
 *
 */


#ifndef PR_MSGS_MESSAGE_BHSTATE_H
#define PR_MSGS_MESSAGE_BHSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pr_msgs
{
template <class ContainerAllocator>
struct BHState_
{
  typedef BHState_<ContainerAllocator> Type;

  BHState_()
    : header()
    , positions()
    , inner_links()
    , outer_links()
    , breakaway()
    , strain()
    , puck_temp_C()
    , motor_temp_C()
    , state(0)
    , internal_state()
    , puck_mode()  {
    }
  BHState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , positions(_alloc)
    , inner_links(_alloc)
    , outer_links(_alloc)
    , breakaway(_alloc)
    , strain(_alloc)
    , puck_temp_C(_alloc)
    , motor_temp_C(_alloc)
    , state(0)
    , internal_state(_alloc)
    , puck_mode(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  _positions_type positions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _inner_links_type;
  _inner_links_type inner_links;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _outer_links_type;
  _outer_links_type outer_links;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _breakaway_type;
  _breakaway_type breakaway;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _strain_type;
  _strain_type strain;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _puck_temp_C_type;
  _puck_temp_C_type puck_temp_C;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor_temp_C_type;
  _motor_temp_C_type motor_temp_C;

   typedef uint8_t _state_type;
  _state_type state;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _internal_state_type;
  _internal_state_type internal_state;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _puck_mode_type;
  _puck_mode_type puck_mode;


    enum { state_done = 1 };
     enum { state_moving = 2 };
     enum { state_stalled = 3 };
     enum { state_uninitialized = 255 };
 

  typedef boost::shared_ptr< ::pr_msgs::BHState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::BHState_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct BHState_

typedef ::pr_msgs::BHState_<std::allocator<void> > BHState;

typedef boost::shared_ptr< ::pr_msgs::BHState > BHStatePtr;
typedef boost::shared_ptr< ::pr_msgs::BHState const> BHStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr_msgs::BHState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr_msgs::BHState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'pr_msgs': ['/home/mpcadosch/Dev/bci_ros/bci_project_ws/src/pr_msgs/msg', '/home/mpcadosch/Dev/bci_ros/bci_project_ws/devel/share/pr_msgs/msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/hydro/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/hydro/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr_msgs::BHState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr_msgs::BHState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msgs::BHState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msgs::BHState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msgs::BHState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msgs::BHState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::BHState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6b6dfb306cd8c934654e8dd288b25fb";
  }

  static const char* value(const ::pr_msgs::BHState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6b6dfb306cd8c93ULL;
  static const uint64_t static_value2 = 0x4654e8dd288b25fbULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::BHState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr_msgs/BHState";
  }

  static const char* value(const ::pr_msgs::BHState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::BHState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64[] positions\n\
float64[] inner_links\n\
float64[] outer_links\n\
bool[] breakaway\n\
float64[] strain\n\
int32[] puck_temp_C\n\
int32[] motor_temp_C\n\
uint8 state\n\
uint8[] internal_state\n\
uint8[] puck_mode\n\
\n\
uint8 state_done=1\n\
uint8 state_moving=2\n\
uint8 state_stalled=3\n\
uint8 state_uninitialized=255\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::pr_msgs::BHState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr_msgs::BHState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.positions);
      stream.next(m.inner_links);
      stream.next(m.outer_links);
      stream.next(m.breakaway);
      stream.next(m.strain);
      stream.next(m.puck_temp_C);
      stream.next(m.motor_temp_C);
      stream.next(m.state);
      stream.next(m.internal_state);
      stream.next(m.puck_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct BHState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::BHState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr_msgs::BHState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "inner_links[]" << std::endl;
    for (size_t i = 0; i < v.inner_links.size(); ++i)
    {
      s << indent << "  inner_links[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.inner_links[i]);
    }
    s << indent << "outer_links[]" << std::endl;
    for (size_t i = 0; i < v.outer_links.size(); ++i)
    {
      s << indent << "  outer_links[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.outer_links[i]);
    }
    s << indent << "breakaway[]" << std::endl;
    for (size_t i = 0; i < v.breakaway.size(); ++i)
    {
      s << indent << "  breakaway[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.breakaway[i]);
    }
    s << indent << "strain[]" << std::endl;
    for (size_t i = 0; i < v.strain.size(); ++i)
    {
      s << indent << "  strain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.strain[i]);
    }
    s << indent << "puck_temp_C[]" << std::endl;
    for (size_t i = 0; i < v.puck_temp_C.size(); ++i)
    {
      s << indent << "  puck_temp_C[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.puck_temp_C[i]);
    }
    s << indent << "motor_temp_C[]" << std::endl;
    for (size_t i = 0; i < v.motor_temp_C.size(); ++i)
    {
      s << indent << "  motor_temp_C[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor_temp_C[i]);
    }
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "internal_state[]" << std::endl;
    for (size_t i = 0; i < v.internal_state.size(); ++i)
    {
      s << indent << "  internal_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.internal_state[i]);
    }
    s << indent << "puck_mode[]" << std::endl;
    for (size_t i = 0; i < v.puck_mode.size(); ++i)
    {
      s << indent << "  puck_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.puck_mode[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_BHSTATE_H

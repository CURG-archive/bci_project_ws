/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/mpcadosch/Dev/bci_ros/bci_project_ws/src/pr_msgs/msg/WAMPrecomputedBlendedTrajectory.msg
 *
 */


#ifndef PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDEDTRAJECTORY_H
#define PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDEDTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr_msgs/Joints.h>
#include <pr_msgs/Joints.h>
#include <pr_msgs/Joints.h>
#include <pr_msgs/Joints.h>
#include <pr_msgs/WAMPrecomputedBlendElement.h>

namespace pr_msgs
{
template <class ContainerAllocator>
struct WAMPrecomputedBlendedTrajectory_
{
  typedef WAMPrecomputedBlendedTrajectory_<ContainerAllocator> Type;

  WAMPrecomputedBlendedTrajectory_()
    : id(0)
    , HoldOnStall(false)
    , WaitForStart(false)
    , start_position()
    , end_position()
    , max_joint_vel()
    , max_joint_accel()
    , macpieces()
    , traj_duration(0.0)  {
    }
  WAMPrecomputedBlendedTrajectory_(const ContainerAllocator& _alloc)
    : id(0)
    , HoldOnStall(false)
    , WaitForStart(false)
    , start_position(_alloc)
    , end_position(_alloc)
    , max_joint_vel(_alloc)
    , max_joint_accel(_alloc)
    , macpieces(_alloc)
    , traj_duration(0.0)  {
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef uint8_t _HoldOnStall_type;
  _HoldOnStall_type HoldOnStall;

   typedef uint8_t _WaitForStart_type;
  _WaitForStart_type WaitForStart;

   typedef  ::pr_msgs::Joints_<ContainerAllocator>  _start_position_type;
  _start_position_type start_position;

   typedef  ::pr_msgs::Joints_<ContainerAllocator>  _end_position_type;
  _end_position_type end_position;

   typedef  ::pr_msgs::Joints_<ContainerAllocator>  _max_joint_vel_type;
  _max_joint_vel_type max_joint_vel;

   typedef  ::pr_msgs::Joints_<ContainerAllocator>  _max_joint_accel_type;
  _max_joint_accel_type max_joint_accel;

   typedef std::vector< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >::other >  _macpieces_type;
  _macpieces_type macpieces;

   typedef double _traj_duration_type;
  _traj_duration_type traj_duration;




  typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct WAMPrecomputedBlendedTrajectory_

typedef ::pr_msgs::WAMPrecomputedBlendedTrajectory_<std::allocator<void> > WAMPrecomputedBlendedTrajectory;

typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory > WAMPrecomputedBlendedTrajectoryPtr;
typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory const> WAMPrecomputedBlendedTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'pr_msgs': ['/home/mpcadosch/Dev/bci_ros/bci_project_ws/src/pr_msgs/msg', '/home/mpcadosch/Dev/bci_ros/bci_project_ws/devel/share/pr_msgs/msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/hydro/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/hydro/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71bcabe3695718cad854012f233bf235";
  }

  static const char* value(const ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71bcabe3695718caULL;
  static const uint64_t static_value2 = 0xd854012f233bf235ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr_msgs/WAMPrecomputedBlendedTrajectory";
  }

  static const char* value(const ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id\n\
bool HoldOnStall\n\
bool WaitForStart\n\
pr_msgs/Joints start_position\n\
pr_msgs/Joints end_position\n\
pr_msgs/Joints max_joint_vel\n\
pr_msgs/Joints max_joint_accel\n\
pr_msgs/WAMPrecomputedBlendElement[] macpieces\n\
float64 traj_duration\n\
\n\
================================================================================\n\
MSG: pr_msgs/Joints\n\
float64[] j\n\
\n\
================================================================================\n\
MSG: pr_msgs/WAMPrecomputedBlendElement\n\
pr_msgs/Joints start_pos\n\
pr_msgs/Joints end_pos\n\
float64 start_time\n\
float64 duration\n\
float64 max_path_velocity\n\
float64 max_path_acceleration\n\
";
  }

  static const char* value(const ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.HoldOnStall);
      stream.next(m.WaitForStart);
      stream.next(m.start_position);
      stream.next(m.end_position);
      stream.next(m.max_joint_vel);
      stream.next(m.max_joint_accel);
      stream.next(m.macpieces);
      stream.next(m.traj_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct WAMPrecomputedBlendedTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "HoldOnStall: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HoldOnStall);
    s << indent << "WaitForStart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WaitForStart);
    s << indent << "start_position: ";
    s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.start_position);
    s << indent << "end_position: ";
    s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.end_position);
    s << indent << "max_joint_vel: ";
    s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.max_joint_vel);
    s << indent << "max_joint_accel: ";
    s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.max_joint_accel);
    s << indent << "macpieces[]" << std::endl;
    for (size_t i = 0; i < v.macpieces.size(); ++i)
    {
      s << indent << "  macpieces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >::stream(s, indent + "    ", v.macpieces[i]);
    }
    s << indent << "traj_duration: ";
    Printer<double>::stream(s, indent + "  ", v.traj_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDEDTRAJECTORY_H

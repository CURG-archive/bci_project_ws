"""autogenerated by genpy from staubli_tx60/SetJointTrajectoryGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import staubli_tx60.msg

class SetJointTrajectoryGoal(genpy.Message):
  _md5sum = "6cf908dc35c4586beaf79d9cb61401d8"
  _type = "staubli_tx60/SetJointTrajectoryGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
JointTrajectoryPoint[] jointTrajectory # Points contain joint space goal points and staubli movement params which encode velocity, acceleration, and goal region constraints

================================================================================
MSG: staubli_tx60/JointTrajectoryPoint
float64[] jointValues
StaubliMovementParams params
================================================================================
MSG: staubli_tx60/StaubliMovementParams
int32 movementType
float64 distBlendPrev #meters unused right now - default .05
float64 distBlendNext #meters unused right now - default .05
float64 jointVelocity #0-1
float64 jointAcc #0-1
float64 jointDec #0-1
float64 endEffectorMaxTranslationVel #meters/sec?
float64 endEffectorMaxRotationalVel #radians/sec



"""
  __slots__ = ['jointTrajectory']
  _slot_types = ['staubli_tx60/JointTrajectoryPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       jointTrajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetJointTrajectoryGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.jointTrajectory is None:
        self.jointTrajectory = []
    else:
      self.jointTrajectory = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.jointTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointTrajectory:
        length = len(val1.jointValues)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.jointValues))
        _v1 = val1.params
        _x = _v1
        buff.write(_struct_i7d.pack(_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.jointTrajectory is None:
        self.jointTrajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointTrajectory = []
      for i in range(0, length):
        val1 = staubli_tx60.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.jointValues = struct.unpack(pattern, str[start:end])
        _v2 = val1.params
        _x = _v2
        start = end
        end += 60
        (_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel,) = _struct_i7d.unpack(str[start:end])
        self.jointTrajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.jointTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointTrajectory:
        length = len(val1.jointValues)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.jointValues.tostring())
        _v3 = val1.params
        _x = _v3
        buff.write(_struct_i7d.pack(_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.jointTrajectory is None:
        self.jointTrajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointTrajectory = []
      for i in range(0, length):
        val1 = staubli_tx60.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.jointValues = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v4 = val1.params
        _x = _v4
        start = end
        end += 60
        (_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel,) = _struct_i7d.unpack(str[start:end])
        self.jointTrajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i7d = struct.Struct("<i7d")

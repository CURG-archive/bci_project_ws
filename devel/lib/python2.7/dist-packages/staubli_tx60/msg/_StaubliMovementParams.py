"""autogenerated by genpy from staubli_tx60/StaubliMovementParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StaubliMovementParams(genpy.Message):
  _md5sum = "92fb956a841cfe210a517dfdf3889fd4"
  _type = "staubli_tx60/StaubliMovementParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 movementType
float64 distBlendPrev #meters unused right now - default .05
float64 distBlendNext #meters unused right now - default .05
float64 jointVelocity #0-1
float64 jointAcc #0-1
float64 jointDec #0-1
float64 endEffectorMaxTranslationVel #meters/sec?
float64 endEffectorMaxRotationalVel #radians/sec



"""
  __slots__ = ['movementType','distBlendPrev','distBlendNext','jointVelocity','jointAcc','jointDec','endEffectorMaxTranslationVel','endEffectorMaxRotationalVel']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       movementType,distBlendPrev,distBlendNext,jointVelocity,jointAcc,jointDec,endEffectorMaxTranslationVel,endEffectorMaxRotationalVel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StaubliMovementParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.movementType is None:
        self.movementType = 0
      if self.distBlendPrev is None:
        self.distBlendPrev = 0.
      if self.distBlendNext is None:
        self.distBlendNext = 0.
      if self.jointVelocity is None:
        self.jointVelocity = 0.
      if self.jointAcc is None:
        self.jointAcc = 0.
      if self.jointDec is None:
        self.jointDec = 0.
      if self.endEffectorMaxTranslationVel is None:
        self.endEffectorMaxTranslationVel = 0.
      if self.endEffectorMaxRotationalVel is None:
        self.endEffectorMaxRotationalVel = 0.
    else:
      self.movementType = 0
      self.distBlendPrev = 0.
      self.distBlendNext = 0.
      self.jointVelocity = 0.
      self.jointAcc = 0.
      self.jointDec = 0.
      self.endEffectorMaxTranslationVel = 0.
      self.endEffectorMaxRotationalVel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i7d.pack(_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel,) = _struct_i7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i7d.pack(_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.movementType, _x.distBlendPrev, _x.distBlendNext, _x.jointVelocity, _x.jointAcc, _x.jointDec, _x.endEffectorMaxTranslationVel, _x.endEffectorMaxRotationalVel,) = _struct_i7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i7d = struct.Struct("<i7d")

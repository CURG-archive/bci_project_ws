"""autogenerated by genpy from staubli_tx60/SetTrajectoryParamsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import staubli_tx60.msg

class SetTrajectoryParamsRequest(genpy.Message):
  _md5sum = "34e78bdefa862389df41cdb559de42b9"
  _type = "staubli_tx60/SetTrajectoryParamsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """staubli_tx60/StaubliMovementParams params
int32 trajectoryPart
int32 TRAJECTORY_START = 0
int32 TRAJECTORY_INTERIOR = 1
int32 TRAJECTORY_END = 2

================================================================================
MSG: staubli_tx60/StaubliMovementParams
int32 movementType
float64 distBlendPrev #meters unused right now - default .05
float64 distBlendNext #meters unused right now - default .05
float64 jointVelocity #0-1
float64 jointAcc #0-1
float64 jointDec #0-1
float64 endEffectorMaxTranslationVel #meters/sec?
float64 endEffectorMaxRotationalVel #radians/sec



"""
  # Pseudo-constants
  TRAJECTORY_START = 0
  TRAJECTORY_INTERIOR = 1
  TRAJECTORY_END = 2

  __slots__ = ['params','trajectoryPart']
  _slot_types = ['staubli_tx60/StaubliMovementParams','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       params,trajectoryPart

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetTrajectoryParamsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.params is None:
        self.params = staubli_tx60.msg.StaubliMovementParams()
      if self.trajectoryPart is None:
        self.trajectoryPart = 0
    else:
      self.params = staubli_tx60.msg.StaubliMovementParams()
      self.trajectoryPart = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i7di.pack(_x.params.movementType, _x.params.distBlendPrev, _x.params.distBlendNext, _x.params.jointVelocity, _x.params.jointAcc, _x.params.jointDec, _x.params.endEffectorMaxTranslationVel, _x.params.endEffectorMaxRotationalVel, _x.trajectoryPart))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.params is None:
        self.params = staubli_tx60.msg.StaubliMovementParams()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.params.movementType, _x.params.distBlendPrev, _x.params.distBlendNext, _x.params.jointVelocity, _x.params.jointAcc, _x.params.jointDec, _x.params.endEffectorMaxTranslationVel, _x.params.endEffectorMaxRotationalVel, _x.trajectoryPart,) = _struct_i7di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i7di.pack(_x.params.movementType, _x.params.distBlendPrev, _x.params.distBlendNext, _x.params.jointVelocity, _x.params.jointAcc, _x.params.jointDec, _x.params.endEffectorMaxTranslationVel, _x.params.endEffectorMaxRotationalVel, _x.trajectoryPart))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.params is None:
        self.params = staubli_tx60.msg.StaubliMovementParams()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.params.movementType, _x.params.distBlendPrev, _x.params.distBlendNext, _x.params.jointVelocity, _x.params.jointAcc, _x.params.jointDec, _x.params.endEffectorMaxTranslationVel, _x.params.endEffectorMaxRotationalVel, _x.trajectoryPart,) = _struct_i7di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i7di = struct.Struct("<i7di")
"""autogenerated by genpy from staubli_tx60/SetTrajectoryParamsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetTrajectoryParamsResponse(genpy.Message):
  _md5sum = "95e696a0d10686913abb262e0b4cbbcf"
  _type = "staubli_tx60/SetTrajectoryParamsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool succeeded


"""
  __slots__ = ['succeeded']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       succeeded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetTrajectoryParamsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.succeeded is None:
        self.succeeded = False
    else:
      self.succeeded = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.succeeded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeeded,) = _struct_B.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.succeeded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succeeded,) = _struct_B.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SetTrajectoryParams(object):
  _type          = 'staubli_tx60/SetTrajectoryParams'
  _md5sum = 'be3bc33d30d59d4e10a1794a3cd5f224'
  _request_class  = SetTrajectoryParamsRequest
  _response_class = SetTrajectoryParamsResponse
